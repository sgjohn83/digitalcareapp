/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TechnicianReports.java
 *
 * Created on Sep 4, 2015, 12:24:54 AM
 */

package serviceportal;

import java.awt.Color;
import java.awt.Component;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author sonytara
 */
public class TechnicianReports extends javax.swing.JFrame {

    /** Creates new form TechnicianReports */
    public TechnicianReports() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        SearchBtn = new javax.swing.JButton();
        userLbl = new javax.swing.JLabel();
        statusLbl = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        printBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(serviceportal.ServicePortalApp.class).getContext().getResourceMap(TechnicianReports.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        setResizable(false);
        getContentPane().setLayout(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        jTextField1.setText(resourceMap.getString("jTextField1.text")); // NOI18N
        jTextField1.setName("jTextField1"); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        SearchBtn.setText(resourceMap.getString("SearchBtn.text")); // NOI18N
        SearchBtn.setName("SearchBtn"); // NOI18N
        SearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBtnActionPerformed(evt);
            }
        });

        userLbl.setFont(resourceMap.getFont("statusLbl.font")); // NOI18N
        userLbl.setForeground(resourceMap.getColor("statusLbl.foreground")); // NOI18N
        userLbl.setText(resourceMap.getString("userLbl.text")); // NOI18N
        userLbl.setName("userLbl"); // NOI18N

        statusLbl.setFont(resourceMap.getFont("statusLbl.font")); // NOI18N
        statusLbl.setForeground(resourceMap.getColor("statusLbl.foreground")); // NOI18N
        statusLbl.setText(resourceMap.getString("statusLbl.text")); // NOI18N
        statusLbl.setName("statusLbl"); // NOI18N

        jLabel1.setFont(resourceMap.getFont("statusLbl.font")); // NOI18N
        jLabel1.setForeground(resourceMap.getColor("statusLbl.foreground")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        printBtn.setText(resourceMap.getString("printBtn.text")); // NOI18N
        printBtn.setName("printBtn"); // NOI18N
        printBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(SearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(printBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(userLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(statusLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(SearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(userLbl))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(statusLbl))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(printBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        userLbl.setVisible(false);
        statusLbl.setVisible(false);
        jLabel1.setVisible(false);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(10, 10, 990, 90);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel2.border.title"))); // NOI18N
        jPanel2.setToolTipText(resourceMap.getString("jPanel2.toolTipText")); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N
        jScrollPane1.setPreferredSize(new java.awt.Dimension(452, 100));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable1.setName("jTable1"); // NOI18N
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 948, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanel2);
        jPanel2.setBounds(10, 140, 980, 390);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1024)/2, (screenSize.height-600)/2, 1024, 600);
    }// </editor-fold>//GEN-END:initComponents

    private void SearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBtnActionPerformed
        // TODO add your handling code here:
        SearchReports();
    }//GEN-LAST:event_SearchBtnActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
        SearchReports();
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
         if(evt.getClickCount()==2)
        {
            int selectedRow[] = jTable1.getSelectedRows();
        int selectedCol[] = jTable1.getSelectedColumns();
        String selectedData=null,str="";
        for(int i=0;i<selectedRow.length;i++)
        {
            for(int j=0;j<selectedCol.length;j++)
            {
                str=jTable1.getColumnName(selectedCol[j]);
                str=str +": "+ (String) jTable1.getValueAt(selectedRow[i], selectedCol[j]);

                selectedData=(String) jTable1.getValueAt(selectedRow[i], 6);
            }
        }
        String receipt_no=selectedData;
        ViewReport vr = new ViewReport();
        vr.setDetails(receipt_no);
        vr.setVisible(true);
         }
    }//GEN-LAST:event_jTable1MouseClicked

    private void printBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printBtnActionPerformed
        // TODO add your handling code here:
         try{
            Connection con = DBConnection.getConnection();
            String uname= jTextField1.getText();
            HashMap parameterMap = new HashMap();
            parameterMap.put("tech",uname);
            printClass prc = new printClass(parameterMap, con);
             prc.setreportName("tech.jasper");
            prc.callReport();
          }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_printBtnActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TechnicianReports().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SearchBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton printBtn;
    private javax.swing.JLabel statusLbl;
    private javax.swing.JLabel userLbl;
    // End of variables declaration//GEN-END:variables

   public static String status="";


    private void SearchReports() {
        String techId= jTextField1.getText();
        String sql="select cname as CUSTOMER,contact_no as CONTACT,phone_model as MODEL" +
               ",complaint_name as COMPLAINT,recvd_accr as ACCESSORIES,recvd_by as RECEIVEDBY," +
               "receipt_no as SERVICEID,recvd_date,est_chargs as CHARGES,recvd_time,imei_no";
        String url="";
        if(status.equals("New"))
        {
           url=sql+" from complaint where assigned_to='"+techId+"' and receipt_no in" +
                   " (select receipt_no from status where status='New' and delivery_status='NO')";
           userLbl.setText(techId);
           userLbl.setVisible(true);
           statusLbl.setText(status);
           statusLbl.setVisible(true);
        }
        else if(status.equals("NOID"))
        {
            url=sql+" from complaint where assigned_to is null order by receipt_no asc";
        }

        else if(status.equals("Pending"))
        {
            url=sql+" from complaint where assigned_to='"+techId+"' and receipt_no in" +
                   " (select receipt_no from status where status='Pending' and delivery_status='NO') order by receipt_no asc";
            userLbl.setText(techId);
           userLbl.setVisible(true);
           statusLbl.setText(status);
           statusLbl.setVisible(true);
        }
        else if(status.equals("Completed"))
        {
            url=sql+" from complaint where assigned_to='"+techId+"' and receipt_no in" +
                   " (select receipt_no from status where status='Completed') order by receipt_no asc";
            userLbl.setText(techId);
           userLbl.setVisible(true);
           statusLbl.setText(status);
           statusLbl.setVisible(true);
        }
        else if(status.equals("Failed"))
        {
            url=sql+" from complaint where assigned_to='"+techId+"' and receipt_no in" +
                   " (select receipt_no from status where (status='Failed' or status='Cancelled')) order by receipt_no asc";
            userLbl.setText(techId);
           userLbl.setVisible(true);
           statusLbl.setText(status);
           statusLbl.setVisible(true);
        }
        else if(status.equals("Delivered"))
        {
            url=sql+" from complaint where assigned_to='"+techId+"' and receipt_no in" +
                   " (select receipt_no from status where delivery_status='Delivered')order by receipt_no asc";
            userLbl.setText(techId);
           userLbl.setVisible(true);
           statusLbl.setText(status);
           statusLbl.setVisible(true);
        }

        else if(status.equals("dlist"))
     {
        DateFormat df = new SimpleDateFormat("dd-MMM-yy");
        Calendar c = Calendar.getInstance();
         this.setTitle("Today's Completed List");
         url="select c.receipt_no,phone_model,complaint_name,recvd_date,est_chargs,assigned_to,status_date as COMPLETED_ON " +
                 " from complaint c,status s where c.receipt_no=s.receipt_no and assigned_to='"+jTextField1.getText()+"' and c.receipt_no in" +
                 " (select receipt_no from status where status='Completed' and status_date='"+df.format(c.getTime())+"') order by receipt_no";
     }

        try
        {

              QueryTableModel3 qtm;
       qtm=new QueryTableModel3();
       qtm.setHostURL("jdbc:oracle:thin:digital/digital@//localhost:1521/XE");

       qtm.setQuery(url);
       jTable1.setModel(qtm);
        MyTableRender3 r = new MyTableRender3();
     jTable1.setDefaultRenderer(Object.class, r);
     Integer c = jTable1.getRowCount();
     String i = "Complaints="+c.toString();
     jLabel1.setText(i);
     jLabel1.setVisible(true);


        }


        catch(Exception e)
        {
            e.printStackTrace();
        }


    }
    public void setStatusMode(String mode)
    {
        status=mode;
    }

   }

 class QueryTableModel3 extends AbstractTableModel {
  Vector cache; // will hold String[] objects . . .

  int colCount;

  String[] headers;

  Connection db;

  Statement statement;

  String currentURL;

  public QueryTableModel3() {
    cache = new Vector();

    try
    {
        Class.forName("oracle.jdbc.OracleDriver");
    }
    catch(Exception e)
    {
        e.printStackTrace();
    }

  }

  public String getColumnName(int i) {
    return headers[i];
  }

  public int getColumnCount() {
    return colCount;
  }

  public int getRowCount() {
    return cache.size();
  }

  public Object getValueAt(int row, int col) {
    return ((String[]) cache.elementAt(row))[col];
  }

  public void setHostURL(String url) {
    if (url.equals(currentURL)) {
      // same database, we can leave the current connection open
      return;
    }
    // Oops . . . new connection required
    closeDB();
    initDB(url);
    currentURL = url;
  }

  // All the real work happens here; in a real application,
  // we'd probably perform the query in a separate thread.
  public void setQuery(String q) {
    cache = new Vector();
    try {
      // Execute the query and store the result set and its metadata
      ResultSet rs = statement.executeQuery(q);
      ResultSetMetaData meta = rs.getMetaData();
      colCount = meta.getColumnCount();

      // Now we must rebuild the headers array with the new column names
      headers = new String[colCount];
      for (int h = 1; h <= colCount; h++) {
        headers[h - 1] = meta.getColumnName(h);
      }

      // and file the cache with the records from our query. This would
      // not be
      // practical if we were expecting a few million records in response
      // to our
      // query, but we aren't, so we can do this.
      DateFormat df= new SimpleDateFormat("dd-MMM-yy");
      while (rs.next()) {
        String[] record = new String[colCount];
        for (int i = 0; i < colCount; i++) {

           if(i==7)
           {
              record[i] = df.format(rs.getDate(i+1));
           }
           else if(TechnicianReports.status.equals("dlist") && (i==3 || i==6) )
           {
              record[i] = df.format(rs.getDate(i+1));
           }
           else
           record[i] = rs.getString(i + 1);
        }
        cache.addElement(record);
      }
      fireTableChanged(null); // notify everyone that we have a new table.
    } catch (Exception e) {
      cache = new Vector(); // blank it out and keep going.
      e.printStackTrace();
    }
  }

  public void initDB(String url) {
    try {
      db = DBConnection.getConnection();
      statement = db.createStatement();
    } catch (Exception e) {
      System.out.println("Could not initialize the database.");
      e.printStackTrace();
    }
  }

  public void closeDB() {
    try {
      if (statement != null) {
        statement.close();
      }
      if (db != null) {
        db.close();
      }
    } catch (Exception e) {
      System.out.println("Could not close the current connection.");
      e.printStackTrace();
    }
  }
}
class MyTableRender3 extends DefaultTableCellRenderer
{

    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
       Component comp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        if(!isSelected)
       {
           Color c = table.getBackground();
           if((row%2==0) && c.getRed()>10 && c.getGreen()>10 && c.getBlue()>10 )
             comp.setBackground(Color.WHITE);
           else
               comp.setBackground(new Color(238, 224, 229));
       }
       return comp;

    }

}
