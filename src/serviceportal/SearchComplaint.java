/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SearchComplaint.java
 *
 * Created on Aug 11, 2015, 5:36:07 PM
 */

package serviceportal;

/**
 *
 * @author sgjohn
 */
import java.awt.event.KeyEvent;
import javax.swing.*;
import java.awt.*;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Vector;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
public class SearchComplaint extends javax.swing.JFrame {

    /** Creates new form SearchComplaint */

    String serviceID;
    public SearchComplaint() {
      
        initComponents();
      
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        updatebtn = new javax.swing.JButton();
        Searchbtn = new javax.swing.JButton();
        statusBtn = new javax.swing.JButton();
        deliverBtn = new javax.swing.JButton();
        complButton = new javax.swing.JButton();
        addChargesbtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        countLbl = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        deleteBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(serviceportal.ServicePortalApp.class).getContext().getResourceMap(SearchComplaint.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        getContentPane().setLayout(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel1KeyPressed(evt);
            }
        });

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ALL", "Service ID", "ALL2", "ALL3", "Contact No", "Technician", "Customer Name", "IMEI NO", "Phone Model", "New", "Pending", "Completed", "Failed", "Delivered", "Returned" }));
        jComboBox1.setName("jComboBox1"); // NOI18N

        jTextField1.setText(resourceMap.getString("jTextField1.text")); // NOI18N
        jTextField1.setName("jTextField1"); // NOI18N
        jTextField1.setNextFocusableComponent(Searchbtn);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        updatebtn.setText(resourceMap.getString("updatebtn.text")); // NOI18N
        updatebtn.setName("updatebtn"); // NOI18N
        updatebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatebtnActionPerformed(evt);
            }
        });

        Searchbtn.setText(resourceMap.getString("Searchbtn.text")); // NOI18N
        Searchbtn.setName("Searchbtn"); // NOI18N
        Searchbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchbtnActionPerformed(evt);
            }
        });

        statusBtn.setText(resourceMap.getString("statusBtn.text")); // NOI18N
        statusBtn.setName("statusBtn"); // NOI18N
        statusBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusBtnActionPerformed(evt);
            }
        });

        deliverBtn.setText(resourceMap.getString("deliverBtn.text")); // NOI18N
        deliverBtn.setName("deliverBtn"); // NOI18N
        deliverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deliverBtnActionPerformed(evt);
            }
        });

        complButton.setText(resourceMap.getString("complButton.text")); // NOI18N
        complButton.setName("complButton"); // NOI18N
        complButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                complButtonActionPerformed(evt);
            }
        });

        addChargesbtn.setText(resourceMap.getString("addChargesbtn.text")); // NOI18N
        addChargesbtn.setName("addChargesbtn"); // NOI18N
        addChargesbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addChargesbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Searchbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(complButton)
                .addGap(18, 18, 18)
                .addComponent(statusBtn)
                .addGap(18, 18, 18)
                .addComponent(deliverBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(updatebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(addChargesbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Searchbtn, complButton, deliverBtn, statusBtn, updatebtn});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addChargesbtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Searchbtn, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                        .addComponent(updatebtn, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                        .addComponent(deliverBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                        .addComponent(statusBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                        .addComponent(complButton, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE))))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Searchbtn, complButton, deliverBtn, statusBtn, updatebtn});

        getContentPane().add(jPanel1);
        jPanel1.setBounds(10, 11, 1250, 77);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel2.border.title"))); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N

        jScrollPane1.setMinimumSize(new java.awt.Dimension(500, 600));
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setFont(resourceMap.getFont("jTable1.font")); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setName("jTable1"); // NOI18N
        jTable1.setRowHeight(30);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.setShowHorizontalLines(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable1PropertyChange(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener()
            {
                public void valueChanged(ListSelectionEvent e)
                {
                    ListSelectionModel ls = (ListSelectionModel)e.getSource();
                    if(ls.isSelectionEmpty())
                    serviceID="";
                }
            });

            javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
            jPanel2.setLayout(jPanel2Layout);
            jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1238, Short.MAX_VALUE))
            );
            jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 483, Short.MAX_VALUE)
            );

            getContentPane().add(jPanel2);
            jPanel2.setBounds(0, 130, 1260, 510);

            countLbl.setFont(resourceMap.getFont("countLbl.font")); // NOI18N
            countLbl.setText(resourceMap.getString("countLbl.text")); // NOI18N
            countLbl.setName("countLbl"); // NOI18N
            getContentPane().add(countLbl);
            countLbl.setBounds(610, 100, 60, 14);
            countLbl.setVisible(false);

            jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
            jLabel3.setName("jLabel3"); // NOI18N
            getContentPane().add(jLabel3);
            jLabel3.setBounds(490, 100, 120, 14);
            jLabel3.setVisible(false);

            deleteBtn.setText(resourceMap.getString("deleteBtn.text")); // NOI18N
            deleteBtn.setName("deleteBtn"); // NOI18N
            deleteBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    deleteBtnActionPerformed(evt);
                }
            });
            getContentPane().add(deleteBtn);
            deleteBtn.setBounds(950, 670, 100, 39);
            deleteBtn.setVisible(false);

            java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
            setBounds((screenSize.width-1366)/2, (screenSize.height-768)/2, 1366, 768);
        }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
        searchDB();
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void SearchbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchbtnActionPerformed
        // TODO add your handling code here:
       searchDB();

    }//GEN-LAST:event_SearchbtnActionPerformed

    private void updatebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatebtnActionPerformed
        // TODO add your handling code here:

        if(serviceID.equals(""))
        {
            JOptionPane.showMessageDialog(null,"Please select a row","Row Not Selected",JOptionPane.ERROR_MESSAGE);
            return;
        }
        UpdateComplaint u = new UpdateComplaint();
        u.loadCombo();
        
         int i =u.setServiceID(serviceID);
         if(i!=-1)
             u.setVisible(true);
         else
             u.dispose();

    }//GEN-LAST:event_updatebtnActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int selectedRow[] = jTable1.getSelectedRows();
        int selectedCol[] = jTable1.getSelectedColumns();
        String selectedData=null,str="";
        for(int i=0;i<selectedRow.length;i++)
        {
            for(int j=0;j<selectedCol.length;j++)
            {
                str=jTable1.getColumnName(selectedCol[j]);
                str=str +": "+ (String) jTable1.getValueAt(selectedRow[i], selectedCol[j]);

                selectedData=(String) jTable1.getValueAt(selectedRow[i], 6);
            }
        }
        serviceID=selectedData;
        if(evt.getClickCount()==2)
        {

        ViewReport vr = new ViewReport();
        vr.setDetails(serviceID);
        vr.setVisible(true);
        }
       
       
    }//GEN-LAST:event_jTable1MouseClicked

    private void statusBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusBtnActionPerformed
        // TODO add your handling code here:
        if(serviceID.equals(""))
        {
            JOptionPane.showMessageDialog(null,"Please select a row","Row Not Selected",JOptionPane.ERROR_MESSAGE);
            return;
        }
        Status st = new Status();
        st.setVisible(true);
        st.setServiceID(serviceID);
    }//GEN-LAST:event_statusBtnActionPerformed


    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_jTextField1KeyPressed

    private void jTable1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTable1PropertyChange
        // TODO add your handling code here:

    }//GEN-LAST:event_jTable1PropertyChange

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_DELETE)
        {
           if(serviceID.equals(""))
           {
               JOptionPane.showMessageDialog(null, "Please select a row","Row not selected",JOptionPane.ERROR_MESSAGE);
               return;
           }
            deleteComplaint();
           searchDB();
        }
    }//GEN-LAST:event_jTable1KeyPressed

    private void deliverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deliverBtnActionPerformed
        // TODO add your handling code here:

        if(serviceID==null)
            return;
        if(!serviceID.equals(""))
        {
        DeliverHandset.setServiceID(serviceID);
        DeliverHandset.delivery();
        searchDB();
        }
    }//GEN-LAST:event_deliverBtnActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formKeyPressed

    private void jPanel1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel1KeyPressed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_jPanel1KeyPressed

    private void complButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_complButtonActionPerformed
        // TODO add your handling code here:
        NewComplaint newC = new NewComplaint();
        newC.loadCombo();
        newC.setVisible(true);
    }//GEN-LAST:event_complButtonActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        if(serviceID.equals("")) {
            JOptionPane.showMessageDialog(null,"Please select a row","Row Not Selected",JOptionPane.ERROR_MESSAGE);
            return;
        }
        deleteComplaint();
        searchDB();
}//GEN-LAST:event_deleteBtnActionPerformed

    private void addChargesbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addChargesbtnActionPerformed
        // TODO add your handling code here:

        AddCharges a = new AddCharges();
        a.setServiceId(serviceID);
        a.loadCombo();
        a.setVisible(true);
    }//GEN-LAST:event_addChargesbtnActionPerformed


    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new SearchComplaint().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Searchbtn;
    private javax.swing.JButton addChargesbtn;
    private javax.swing.JButton complButton;
    private javax.swing.JLabel countLbl;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton deliverBtn;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton statusBtn;
    private javax.swing.JButton updatebtn;
    // End of variables declaration//GEN-END:variables
   Connection con = DBConnection.getConnection();
  static String statusMode="";
   public void deleteVisible(boolean a)
   {
     //  if(!ServicePortalApp.getUsername().equals("admin"))
      // {

           deleteBtn.setEnabled(a);
     //  }
   }

    private void deleteComplaint() {

       if(!ServicePortalApp.getUsername().equals("admin"))
       {
           JOptionPane.showMessageDialog(null, "Access Denied","Error",JOptionPane.ERROR_MESSAGE);
           return;
       }
        Connection delCon = null;
        Statement delSt = null;
        try
        {
            delCon=DBConnection.getConnection();
            delSt=delCon.createStatement();
            delSt.executeUpdate("delete from cancelled where receipt_no='"+serviceID+"'");
            delSt.executeUpdate("delete from delivery where receipt_no='"+serviceID+"'");
            delSt.executeUpdate("delete from status where receipt_no='"+serviceID+"'");
            delSt.executeUpdate("delete from payments where serviceid='"+serviceID+"'");
            int i=delSt.executeUpdate("delete from complaint where receipt_no='"+serviceID+"'");
           if(i!=0)
               JOptionPane.showMessageDialog(null, "Complaint details removed successfully");



        }
        catch(Exception w)
        {
            w.printStackTrace();
        }
    }

    private void searchDB() {


        String url="";
       String sql1 = "select cname as CUSTOMER,contact_no as CONTACT,phone_model as MODEL" +
               ",complaint_name as COMPLAINT,recvd_accr as ACCESSORIES,recvd_by as RECEIVEDBY," +
               "c.receipt_no as SERVICEID,recvd_date,est_chargs as CHARGES,recvd_time,imei_no,status,delivery_status,advance,balance";

       if(jComboBox1.getSelectedItem().equals("Customer Name")&& !jTextField1.getText().equals("") )
       {
           url=sql1+" from complaint c,status s where upper(cname) like '%"+jTextField1.getText().toUpperCase()+"%' and c.receipt_no=s.receipt_no order by c.receipt_no asc";
           statusMode="";
       }
       else if(jComboBox1.getSelectedItem().equals("Contact No") && !jTextField1.getText().equals(""))
       {
           url=sql1+" from complaint c,status s where contact_no like '%"+jTextField1.getText()+"%' and c.receipt_no=s.receipt_no  order by c.receipt_no asc";
           statusMode="";
       }
       else if(jComboBox1.getSelectedItem().equals("Service ID") && !jTextField1.getText().equals(""))
       {
           url=sql1+" from complaint c,status s where c.receipt_no like '%"+jTextField1.getText()+"%' and c.receipt_no=s.receipt_no  order by c.receipt_no asc";
           statusMode="";
       }
       else if(jComboBox1.getSelectedItem().equals("IMEI NO") && !jTextField1.getText().equals(""))
       {
           url=sql1+" from complaint c,status s where imei_no like '%"+jTextField1.getText()+"%' and c.receipt_no=s.receipt_no  order by c.receipt_no asc";
           statusMode="";
       }
       else if(jComboBox1.getSelectedItem().equals("Technician"))
       {
           url=sql1+" from complaint c,status s where assigned_to='"+jTextField1.getText()+"' and c.receipt_no=s.receipt_no  order by c.receipt_no asc";
           statusMode="";
       }


       else if(jComboBox1.getSelectedItem().equals("ALL"))
       {
           url=sql1+" from complaint c,status s where  c.receipt_no=s.receipt_no  order by c.receipt_no asc";
           statusMode="";
       }
         else if(jComboBox1.getSelectedItem().equals("ALL2"))
       {
           url=sql1+" from complaint c,status s where  c.receipt_no=s.receipt_no  order by c.receipt_no desc";
           statusMode="";
       }
         else if(jComboBox1.getSelectedItem().equals("ALL3"))
       {
           url=sql1+" from complaint c,status s where  c.receipt_no=s.receipt_no and delivery_status='NO'  order by decode(status,'New',1,'Pending',2,'Completed',3,'Failed',4,'Cancelled',5),c.receipt_no asc";
           statusMode="";
       }

       else if(jComboBox1.getSelectedItem().equals("New"))
       {
           url=sql1+ " from complaint c,status s where c.receipt_no=s.receipt_no and c.receipt_no in " +
                "(select receipt_no from status where status = 'New' and delivery_status='NO')";
            statusMode=jComboBox1.getSelectedItem().toString();
       }
       else if(jComboBox1.getSelectedItem().equals("Pending"))
       {
           url=sql1+" from complaint c,status s where  c.receipt_no=s.receipt_no and c.receipt_no in " +
                "(select receipt_no from status where status = 'Pending' and delivery_status='NO')";
             statusMode=jComboBox1.getSelectedItem().toString();
       }

       else if (jComboBox1.getSelectedItem().equals("Completed"))
       {
           url=sql1+" from complaint c,status s where  c.receipt_no=s.receipt_no and  c.receipt_no in " +
                "(select receipt_no from status where status = 'Completed' and delivery_status='NO')";
             statusMode=jComboBox1.getSelectedItem().toString();
       }
       else if(jComboBox1.getSelectedItem().equals("Failed"))
       {
           url=sql1+" from complaint c,status s where  c.receipt_no=s.receipt_no and  c.receipt_no in " +
                "(select receipt_no from status where (status = 'Failed' or status='Cancelled') and delivery_status='NO')";
             statusMode=jComboBox1.getSelectedItem().toString();
       }
       else if(jComboBox1.getSelectedItem().equals("Delivered"))
       {
           url=sql1+" from complaint c,status s where  c.receipt_no=s.receipt_no and  c.receipt_no in " +
                "(select receipt_no from status where delivery_status = 'Delivered')";
            statusMode=jComboBox1.getSelectedItem().toString();
       }
       else if(jComboBox1.getSelectedItem().equals("Phone Model"))
       {
           url=sql1+" from complaint c,status s where upper(phone_model) like '%"+jTextField1.getText().toUpperCase()+"%' and c.receipt_no=s.receipt_no order by c.receipt_no asc";
       }

      else if(jComboBox1.getSelectedItem().equals("Returned"))
       {
           url=sql1+" from complaint c,status s where  c.receipt_no=s.receipt_no and  c.receipt_no in " +
                "(select receipt_no from status where delivery_status = 'Returned')";
            statusMode=jComboBox1.getSelectedItem().toString();
       }
       else
       {
           return;
       }

       QueryTableModel qtm;
       qtm=new QueryTableModel();
       qtm.setHostURL("jdbc:oracle:thin:digital/digital@//localhost:1521/XE");

       qtm.setQuery(url);
       jTable1.setModel(qtm);

        MyTableRender r = new MyTableRender();
jTable1.setDefaultRenderer(Object.class, r);
  Integer c=jTable1.getRowCount();

  countLbl.setText(c.toString());
  jLabel3.setVisible(true);
  countLbl.setVisible(true);

  
  jTable1.getColumnModel().getColumn(4).setMinWidth(0);
  jTable1.getColumnModel().getColumn(4).setMaxWidth(0);
  jTable1.getColumnModel().getColumn(5).setMinWidth(0);
  jTable1.getColumnModel().getColumn(5).setMaxWidth(0);
  jTable1.getColumnModel().getColumn(6).setPreferredWidth(50);
  jTable1.getColumnModel().getColumn(7).setPreferredWidth(30);
  jTable1.getColumnModel().getColumn(8).setPreferredWidth(10);
  jTable1.getColumnModel().getColumn(9).setPreferredWidth(20);
  jTable1.getColumnModel().getColumn(10).setMinWidth(0);
  jTable1.getColumnModel().getColumn(10).setMaxWidth(0);
  jTable1.getColumnModel().getColumn(11).setMinWidth(0);
  jTable1.getColumnModel().getColumn(11).setMaxWidth(0);
  jTable1.getColumnModel().getColumn(12).setMinWidth(0);
  jTable1.getColumnModel().getColumn(12).setMaxWidth(0);


    }

    public void setbutton()
    {
        //this.getRootPane().setDefaultButton(Searchbtn);
    }

    public static String getStatusMode()
    {
        return  statusMode;
    }
}

 class QueryTableModel extends AbstractTableModel {
  Vector cache; // will hold String[] objects . . .

  int colCount;

  String[] headers;

  Connection db;

  Statement statement;

  String currentURL;

  public QueryTableModel() {
    cache = new Vector();

    try
    {
        Class.forName("oracle.jdbc.OracleDriver");
    }
    catch(Exception e)
    {
        e.printStackTrace();
    }

  }

  public String getColumnName(int i) {
    return headers[i];
  }

  public int getColumnCount() {
    return colCount;
  }

  public int getRowCount() {
    return cache.size();
  }

  public Object getValueAt(int row, int col) {
    return ((String[]) cache.elementAt(row))[col];
  }

  public void setHostURL(String url) {
    if (url.equals(currentURL)) {
      // same database, we can leave the current connection open
      return;
    }
    // Oops . . . new connection required
    closeDB();
    initDB(url);
    currentURL = url;
  }

  // All the real work happens here; in a real application,
  // we'd probably perform the query in a separate thread.
  public void setQuery(String q) {
    cache = new Vector();
    try {
      // Execute the query and store the result set and its metadata
   
     ResultSet rs = statement.executeQuery(q);
      ResultSetMetaData meta = rs.getMetaData();
      colCount = meta.getColumnCount();

      // Now we must rebuild the headers array with the new column names
      headers = new String[colCount];
      for (int h = 1; h <= colCount; h++) {
        headers[h - 1] = meta.getColumnName(h);
      }

      // and file the cache with the records from our query. This would
      // not be
      // practical if we were expecting a few million records in response
      // to our
      // query, but we aren't, so we can do this.
      DateFormat df= new SimpleDateFormat("dd-MMM-yy");
      while (rs.next()) {
        String[] record = new String[colCount];
        for (int i = 0; i < colCount; i++) {
          
           if(i==7)
           {
              record[i] = df.format(rs.getDate(i+1));
           }
           else
           record[i] = rs.getString(i + 1);
        }
        cache.addElement(record);
      }
      fireTableChanged(null); // notify everyone that we have a new table.
    } catch (Exception e) {
      cache = new Vector(); // blank it out and keep going.
      e.printStackTrace();
    }
  }

  public void initDB(String url) {
    try {
      db = DBConnection.getConnection();
      statement = db.createStatement();
    } catch (Exception e) {
      System.out.println("Could not initialize the database.");
      e.printStackTrace();
    }
  }

  public void closeDB() {
    try {
      if (statement != null) {
        statement.close();
      }
      if (db != null) {
        db.close();
      }
    } catch (Exception e) {
      System.out.println("Could not close the current connection.");
      e.printStackTrace();
    }
  }
}
class MyTableRender extends DefaultTableCellRenderer
{

    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
       Component comp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
       
       String status=SearchComplaint.getStatusMode();
     
       
       if(!isSelected)
       {
     

         
             if(column!=6)
             {

             Font f = new Font("Courier",Font.PLAIN,24);
                 comp.setFont(f);
             if(table.getValueAt(row, 11).equals("New") && table.getValueAt(row, 12).equals("NO"))
              {
                  comp.setBackground(Color.WHITE);
              }
              else if(table.getValueAt(row, 11).equals("Pending") && table.getValueAt(row, 12).equals("NO"))
              {
                  comp.setBackground(Color.YELLOW);
              }
               else if(table.getValueAt(row, 11).equals("Completed") && table.getValueAt(row, 12).equals("NO"))
              {
                  comp.setBackground(Color.GREEN);
              }
                else if((table.getValueAt(row, 11).equals("Failed") || table.getValueAt(row, 11).equals("Cancelled")) && table.getValueAt(row, 12).equals("NO"))
              {
                  comp.setBackground(Color.RED);
              }
                else if(table.getValueAt(row, 12).equals("Delivered"))
                {
                    comp.setBackground(Color.BLUE);
                }
                else if(table.getValueAt(row, 12).equals("Returned"))
                {
                    comp.setBackground(new Color(185, 122, 87));
                }
             }

            /*   Color c = table.getBackground();
           if((row%2==0) && c.getRed()>10 && c.getGreen()>10 && c.getBlue()>10 )
             comp.setBackground(Color.WHITE);
           else
               comp.setBackground(new Color(238, 224, 229)); */
             else if(column==6)
             {
                 comp.setBackground(Color.PINK);
                 Font f = new Font(Font.DIALOG,Font.BOLD,22);
                 comp.setFont(f);
             }
          

           
       }
       return comp;

    }


}


